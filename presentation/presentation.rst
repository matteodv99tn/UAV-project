
Table of Contents
=================

- Problem introduction
- System description
- Controls
- Development issues
- Results
- Conclusions

Problem introduction
====================

.. columns::

   .. column::

      .. figure:: ../report/Images/rospo-paper.png
         :width: 70%
         :align: center
         Image of the ROSPO prototype.

   .. column::

      The goal is to test the viability of neural networks for solving allocation problems.

      Simulation uses a custom model of the **ROSPO** (*ROtor graSPing Omnidirectional*) platform developed at LAAS-CNRS to test allocation schemes in propeller-driven systems.


System description
==================

.. columns::

   .. column::

      .. figure:: ../report/Images/rospo-scheme.png
         :width: 70%
         :align: center
         Schematic representation of the ROSPO platform.

   .. column::

      The platform consists of:

      - an aluminum frame that uses spherical omnidirectional wheels to slide on the ground;
      - a variable number of turret modules.

      Each turret use a stepper motor to rotate; on top of each module, a BLDC motor drives a propeller that generates thrust to move the platform.


System description: BLDC motor
==============================

The BLDC motor is modelled considering the equivalent single-winding electrical circuit; the dynamics also requires the rotational dynamics of the system;

.. math::
   \begin{cases}
      L \diff i t = v - Ri - e \\
      \Omega = k_v e \\
      J_m T_m = ie \\
      J_m \diff \Omega t = T_m - T_r \\
      T_r = k_r \Omega^2
   \end{cases} \qquad \Rightarrow \qquad
   \begin{cases}
      L \diff i t & = v - Ri - \frac \Omega{k_v} \\
      J_m \diff \Omega t & = \frac i {k_v} - k_r \Omega^2 \\
   \end{cases}

System description: BLDC motor
==============================

The state of the model is :math:`\vett x = (\Omega, i)`, the input :math:`u = v`.

.. math::
   \begin{cases}
      L \diff i t & = v - Ri - \frac \Omega{k_v} \\
      J_m \diff \Omega t & = \frac i {k_v} - k_r \Omega^2 \\
   \end{cases}

The force, in norm, generated by each propeller module is

.. math::

   F(\vett x) = k_l \Omega^2


System description: friction
============================

For control purposes, the following continuous definition of the friction force is used:

.. math::

   \vett F_{f}(\vett v) =
   \begin{cases}
       \mu(|\vett v|) \frac{\vett v}{|\vett v|} & \vett v \neq 0 \\
       0 & v = 0
   \end{cases}

with

.. math::

   \mu(s) = \cancel{\gamma_{1}\big(\tanh(\gamma_{2}s) - \tanh(\gamma_{3} s)\big)} + \gamma_{4} \tanh(\gamma_{5}s) + \cancel{\gamma_{6} s}


System description: ROSPO model
===============================

The ROSPO system model is completed by considering the planar mechanics of the system:

.. math::
   \begin{cases}
       m \ddvett p_{com} & = \matt R(\psi)\sum_{i} F_{p,i} \vers u(\phi_{i}) + \sum_{j} \vett F_{f, j} \\
       J \ddot \psi & = \sum_{i} \vett r_{i} \times F_{p,i} \vers u(\phi_{i}) + \sum_{j} \vett r_{j} \times \vett F_{f, j} \\
       \dvett \phi & = \vett \delta
   \end{cases}

Finally the state :math:`\vett  x` of the system comprises position and velocity of the platform and all the components for the :math:`N_t` number of turrets.
Inputs are voltages applied to each BLDC motor and the rotational speed of each turret module.


Controls: overview
==================

The proposed solution use a hierarchical control structure:

- an high level controller converts the ROSPO state :math:`\vett x` and the planned motion :math:`\vett p_{ref}` information into a commanded virtual input :math:`\vett u_{v,c}`, a wrench to be applied at the com;

- a neural network that can allocate the inputs :math:`\vett u` such that the system applies the desired wrench :math:`\vett u_{v,c}`.


Controls: high level controller
===============================

Based on the reference paper, the high level controller perform a sort of feedback linearization of the non-linear system in order to read an equivalent first-order linear dynamics:

.. math::
   \vett u_{v,c} = \matt B^{-1} \big( \dvett u_{v}^{\star} - \matt A \vett u_{v}^{\star}\big) - \matt K \tilde{\vett u}_{v}

with

.. math::
   \vett u_{v}^{\star} = \begin{pmatrix}
       m \matt R^{\top}(\psi) \left( -k_{p} \tilde{\vett p} - k_{d}\dot{\tilde{\vett p}} + \ddvett p_{ref} - \frac{\vett F_{f}(\vett x)}{m} \right) \\
       J \left( -k_{p, \psi} \tilde{\psi} - k_{d,\psi}\dot{\tilde{\psi}} + \ddot \psi_{ref} - \frac{T_{f,\psi}(\vett x)}{J} \right)
   \end{pmatrix}

and :math:`\matt A = -\gamma_P \matt I_3`, :math:`\matt B = \gamma_P \matt I_3` and :math:`\matt K \in \mathbb R^{3\times 3}` that stabilizes the linear system.

Controls: allocation overview
=============================

I solved the allocation problem by solving independently 2 subproblems:

- computing the voltage :math:`v` to apply at the BLDC motor so that the module exerts a desired force :math:`F_{des}`;
- control the modules so that they asymptotically reach the desired applied wrench.

Both problems are solved using deep neural networks.


Controls: input voltage
=======================

The goal is to generate data on top of which a neural network can be trained to predict at runtime the voltage that should be applied to the motors.

The force :math:`F` generated by the turret doesn't depend on the input :math:`v`, but rather on the state :math:`\vett x` of the motor.

Since we can't optimize istantneously the force, integration of the model in time is performed and optimized against the input by solving the following problem:

.. math::
   v^{\star}(\vett x_{0}) = \arg \min_{v} \big\|F^{+}(v, \vett x_{0}) - F_{des}\big\|^{2}

Controls: input voltage
=======================

Given the optimization problem

.. math::
   v^{\star}(\vett x_{0}) = \arg \min_{v} \big\|F^{+}(v, \vett x_{0}) - F_{des}\big\|^{2}

the numerical solution is find more quickly and with higher reliability by providing the analytical jacobian of the cost function:

.. math::
   \diff c v = 2 \big(F^{+} - F_{des}\big) \pdiff{F}{\vett x} \diff{\vett x}v

Dataset is creating solving the problem sampling uniformly :math:`(\vett x_0, F_{des})` on a reasonable subspace :math:`\mathcal X \times \mathcal F`.


Controls: allocation
====================

The allocation problem is solved similarly. Choosing :math:`\vett x = (F_1, \phi_1,\dots, F_{N_t}, \phi_{N_t})` and :math:`\vett u` the component-wise time derivative of :math:`\vett x`, then the allocation problem is solved in a similar fashion of the previous case:

.. math::
   \vett u^{\star} (\vett x_{0}) = \arg \min_{\vett u} \big\|\vett F_{com}(\vett x_{0} + T_{s}\vett u) - \vett F_{des} \big\|^{2}_{\matt W_{1}} + k \| \vett u \|^{2}_{\matt W_{2}}


Development issues
==================

The main issue in applying this technique is associated to the size of the problem.

When training a neural network that approximate the function :math:`f:\ \mathbb R^3 \rightarrow \mathbb R` that determines the input voltage, generating the dataset can be performed in a reasonable amount of time and training requires low resources.

Training the allocator requires approximating a function :math:`f:\ \mathbb R^{11} \rightarrow \mathbb R^3` (considering 4 turret modules). Sampling a space with such high dimensionality is a challenge: in 30 minutes 1 million samples are collected; training on such amount of data requires 1 hour but still the result is not satisfactory.


Results: force tracking
=======================

.. figure:: ../report/Images/motorNN.eps
   :width: 70%
   :align: center
   Response of the neural networks controller in tracking a reference force.


Results: ROSPO trajectory tracking
==================================

.. columns::

   .. column::

      .. figure:: ../report/Images/path.eps
         :width: 80%
         :align: center
         Path followed by the ROSPO platform.

   .. column::

      This image shows the path followed by the system while tracking a 8-shaped reference described as

      .. math::
         \vett p =
         \begin{pmatrix}
             \rho_{x} \cos(c_{1} t) \\ \rho_{y} \sin(c_{2}t) \\ 0
         \end{pmatrix}

Results: ROSPO trajectory tracking
==================================

.. figure:: ../report/Images/delta.eps
   :width: 70%
   :align: center
   Reference and actual position of the ROSPO platform during the simulation.


Conclusions
===========

Using deep neural networks to fit the optimal allocation function is non optimal due to the high dimensionality of the problem involved and the numerical complexity that comes with it.

More complex data-driven control approach might use:

- reinforcement learning in order to train the system at runtime;
- recurrent neural networks trained on dataset generated with model predictive controls.
